package com.conexia.saludcoop.common.entity.security;

// Generated 11/05/2012 09:26:18 by Hibernate Tools 3.6.0

import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import ar.com.conexia.common.persistence.entity.Identifiable;

import com.conexia.saludcoop.common.dto.transaccional.RoleDTO;
import com.conexia.saludcoop.common.entity.transaccional.RoleEstado;

/**
 * UsuarioRol generated by hbm2java
 */
@Entity
@Table(schema = "security", name = "role", uniqueConstraints = {
		@UniqueConstraint(columnNames = { "id"}),
		@UniqueConstraint(columnNames = "role") })
public class Role implements Identifiable<Integer> {

	private Integer id;
	private Date inserted;
	private boolean deleted;
	private String role;
	@OneToMany
	@JoinTable(name="role_estado_visible", schema="security")
	@JoinColumn(name="role_id", nullable=false)
	private Set<RoleEstado> estadosVisibles;

	/**
	 * Autoridades que comprende el rol (es decir, todos los permisos del rol).
	 */
	private List<User> users;
	
	/**
	 * Autoridades que comprende el rol (es decir, todos los permisos del rol).
	 */
	private List<Authority> authorities;
	

	public Role() {
	}

	public Role(Integer id, 
			Date inserted, boolean deleted, String role) {
		this.id = id;
		this.inserted = inserted;
		this.deleted = deleted;
		this.role = role;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	
	public void setId(Integer id) {
		this.id = id;
	}


	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "inserted", nullable = false, length = 29)
	public Date getInserted() {
		return this.inserted;
	}

	public void setInserted(Date inserted) {
		this.inserted = inserted;
	}

	@Column(name = "deleted", nullable = false)
	public boolean isDeleted() {
		return this.deleted;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	@Column(name = "role", unique = true, nullable = false, length = 30)
	public String getRole() {
		return this.role;
	}

	public void setRole(String role) {
		this.role = role;
	}
	
	/**
	 * Devuelve el valor de authorities.
	 * 
	 * @return El valor de authorities.
	 */
	@ManyToMany(fetch= FetchType.EAGER)
	@JoinTable(name = "role_authority", schema = "security", 
			joinColumns = { @JoinColumn(name = "role_id") }, 
			inverseJoinColumns = { @JoinColumn(name = "authority_id") })
	public List<Authority> getAuthorities() {

		return (this.authorities);
	}

	/**
	 * Asigna un nuevo valor a authorities.
	 * 
	 * @param authorities El valor a asignar a authorities.
	 */
	public void setAuthorities(final List<Authority> authorities) {

		this.authorities = authorities;
	}
	
	/**
	 * Devuelve el valor de users.
	 * 
	 * @return El valor de users.
	 */
	@ManyToMany
	@JoinTable(name = "user_role", schema = "security", 
			joinColumns = { @JoinColumn(name = "role_id") }, 
			inverseJoinColumns = { @JoinColumn(name = "user_id") })
	public List<User> getUsers() {

		return (this.users);
	}

	/**
	 * Asigna un nuevo valor a users.
	 * 
	 * @param users El valor a asignar a users.
	 */
	public void setUsers(final List<User> users) {

		this.users = users;
	}
	
	public RoleDTO toDTO(){
	    RoleDTO dto = new RoleDTO();
	    dto.setId(id);
	    dto.setDescripcion(role);
	    return dto;
	}

}
